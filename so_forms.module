<?php
// $Id$

/**************************
 * ----- PUBLIC API ----- *
 **************************/

/**
 * Creates and initialize a form
 * IMPORTANT : never use ":" in $id ! Module already uses it as separator.
 *
 * About 'memorize' : if set to false, and a 'process' callback is provided, calling module is responsible to store user raw inputs
 * and to provide it again to 'populate' callback when asked. If no 'process' callback is provided, user raw inputs will be stored in session anyway,
 * and used to populate the form before displaying it.
 *
 * About 'buttons' : if no label is provided for a button, this button won't be displayed.
 *
 * About 'perms' : if one or whole perms are missing, 'false' will be assumed, hence nobody exept admin will be able to edit and/or see the form.
 *
 * About 'callbacks' : functions have to be accessible in Drupal's scope, like hooks.
 *
 * About 'callbacks[process]' : If it's not provided, user's inputs are stored in session.
 * Module will be able to retrieve them later : @see so_form_get_user_inputs()
 * However, even if it's provided, data can be also stored in session if the 'memorize' parameter in set to 'true' (in this case 'populate' callback won't be used).
 * This callback is called just before memorization in session. It hasn't to return anything at all.
 * This function will be called with these arguments (by reference) : $module, $id, $user_inputs, $user_raw_inputs and $stored_inputs (session).
 * NOTA : reseting the form leads to call this callback whith the two last arguments set on 'null'.
 * @see so_form_get_user_inputs() for user inputs format
 *
 * About 'callbacks[populate]' : if provided, this function will be called only if 'memorize' parameter is set to 'false'.
 * Function will be called with these arguments : $module and $id
 * Function has to return the user raw inputs received (and stored by itself) by the 'process' callback.
 *
 * About 'callbacks[redirect]' : if provided, this function will be called with these arguments :
 *  $module, $id, and $user_inputs
 * This function should return a path which will be processed by drupal_goto().
 * (It could perform itself the goto(), since at this point, submission process is over, but it wouldn't be very clean)
 * @see so_form_get_user_inputs() for user inputs format
 *
 * @param string $module : module name
 * @param string/int $id : an unique form id (in the module's context) in machine format.
 * @param array $configuration :
 *              - name : (string) : human readable name
 *              - memorize : (boolean) true : module must store user input in session
 *              - advanced : (boolean) true : form has an 'advanced' region
 *              - api_only : (boolean) true : fields can be added/removed only through API. Form 'Field add' unavailable.
 *              - no_groups : (boolean) true : fields can't be gathered in fieldset. Form 'Group add' unavailable.
 *              - buttons : array :
 *                          - submit : (string) submit button label,
 *                          - reset : (string) reset button label
 *              - perms : array :
 *                          - configure : (string) permission for editing the form
 *                          - display : (string) permission for displaying and using the form
 *              - callbacks : array :
 *                          - process : (string) optional : user inputs processing function name
 *                          - populate : (string) optional : name of the fonction called to populate the form before displaying it
 *                          - redirect : (string) optional : name of the function which redirect the user after form submission
 *
 * @return array : public informations @see so_forms_infos()
 */
function so_forms_create($module, $id, $configuration) {
    $form = new stdClass();

    $form->sfid = $module . ':' . $id;
    $form->secured_sfid = md5(uniqid($form->sfid) . 'g.42dégdç95b#n3$j*lfbj'); // sfid public (AHAH, etc.)

    $default_config = array(
        'name' => $form->sfid,
        'memorize' => false,
        'advanced' => false,
        'api_only' => false,
        'no_groups' => false,
        'buttons' => array('submit' => null, 'reset' => null),
        'perms' => array('configure' => null, 'display' => null),
        'callbacks' => array('process' => null, 'populate' => null, 'redirect' => null),
    );

    $config = array_merge($default_config, $configuration);

    $config['memorize'] = $configuration['memorize'] || empty($configuration['callback']['process']);

    $form->params = serialize(array(
        'configuration' => $config,
        'definitions_cache' => array(),
    ));

    $form->name = $config['name'];

    drupal_write_record('so_forms', $form);

    return so_forms_infos($module, $id);
}

/**
 * Provide the name and the secured sfid of the form.
 * '$module' and '$id' parameters should never be exposed on website, under penalty of compromise security.
 * You MUST use the secured sfid for all public operations like AHAH or AJAX callbacks instead.
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 *
 * @return array :
 *      - name
 *      - secured_sfid
 */
function so_forms_infos($module, $id) {
    $form_infos = so_forms_load_form_params(so_forms_get_sfid($module, $id));

    return array(
        'name' => $form_infos->name,
        'secured_sfid' => $form_infos->secured_sfid
    );
}

/**
 * Delete a form
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 */
function so_forms_destroy($module, $id) {
    $sfid = so_forms_get_sfid($module, $id);

    $req = "DELETE FROM {so_forms} WHERE sfid='" . $sfid . "'";
    db_query($req);

    $req = "DELETE FROM {so_forms_fields} WHERE sfid='" . $sfid . "'";
    db_query($req);
}

/**
 * Provides a form administration...form ^^
 * Displays the fields overview page.
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 *
 * @return string : the rendered form
 */
function so_forms_configure($module, $id) {

    module_load_include('admin.inc', 'so_forms');
    $sfid = so_forms_get_sfid($module, $id);

    return drupal_get_form('so_forms_fields_overview', $sfid);
}

/**
 * Provide the fully loaded and themed form
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 *
 * @return string the themed form
 */
function so_form($module, $id) {
    static $index = 0;

    global $language;
    $lang = $language->language;

    return drupal_get_form('so_forms_build_form_' . $index++, $module, $id, $lang);
}

/**
 * Check if new user data are available (new submission) since last call to so_forms_get_user_inputs()
 * If form was reseted, it returns 'null' so '===' must be used if accuracy is needed.
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 *
 * @return boolean/null
 */
function so_forms_check_user_inputs_update($module, $id) {
    $sfid = so_forms_get_sfid($module, $id);

    return $_SESSION['so_forms'][$sfid]['updated'];
}

/**
 * Retrieve stored user inputs.
 * Calling this function will reset the 'updated' flag @see so_forms_check_user_inputs_update()
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 * @param boolean $clear if set to true, clear data in session (user raw inputs will be also cleared)
 *
 * @return array of :
 *      [module name]:[field name]:[field context] => array :
 *              - module_name
 *              - field_name
 *              - field_context
 *              - field_type
 *              - widget
 *              - language
 *              - configuration : (array) module's stored custom configuration
 *              - values : (array) non-indexed array of raw values (a raw value can be as well a simple value,
 *                                 than an array of raw values, ex : grouped values of custom checkboxes)
 */
function so_forms_get_user_inputs($module, $id, $clear = false) {
    $sfid = so_forms_get_sfid($module, $id);

    $user_inputs = $_SESSION['so_forms'][$sfid]['user_inputs'];

    if($clear == true) {
        unset($_SESSION['so_forms'][$sfid]);
    } else {
        $_SESSION['so_forms'][$sfid]['updated'] = false;
    }

    return $user_inputs;
}

/**
 * Add a field
 *
 * @param string $module : module name or null (in this case, $id has to contains the secured sfid)
 * @param string/int $id : an unique form id (in the module's context) in machine format or secured sfid
 * @param array $field :
 *      - name : (string) : field_name provided by calling module
 *      - label : (string) : human readable name. No t().
 *      - type : (string/string array) : existing type(s) or custom type(s) which have to be defined by the module, with hook_so_forms()
 *      - widget : (string) : a valid so_form widget name
 *      - context : (int/string) optional : the context which the field is provided in
 *      - callbacks : (array) : various functions name used during field lifetime
 *
 * @return string : the secured_id of the field
 *
 * @see so_forms.api.php:hook_so_forms() for further documentation
 */
function so_forms_add_field($module, $id, $field) {

    $sfid = so_forms_get_sfid($module, $id);

    $form_params = so_forms_load_form_params($sfid);

    $form_field = array(
        'id' => null,
        'sfid' => $sfid,
        'label' => $field['label'],
        'field' => $field['module'] . ':' . $field['name'] . ':' . (!empty($field['context']) ? $field['context'] : $id),
        'params' => array(
            'form_region' => $form_params->configuration['advanced'] == true ? 'advanced' : 'normal',
            'enabled' => false,
            'callbacks' => $field['callbacks'],
        ),
        'field_type' => $field['type'],
        'widget' => $field['widget'],
        'weight' => 50,
        'field_values' => array(),
    );

    $stored_field = so_forms_store_field($form_field);

    return $stored_field->secured_id;
}

/**
 * Remove a field
 *
 * @param string $secured_id
 */
function so_forms_remove_field($secured_id) {
    db_query("DELETE FROM {so_forms_fields} WHERE secured_id='%s'", $secured_id);
}

/* ----- END OF PUBLIC API ----- */

/**
 * Implementation of hook_forms().
 */
function so_forms_forms($form_id) {
    $forms = array();

    if(strpos($form_id, 'so_forms_build_form') === 0) {
        $forms[$form_id]['callback'] = 'so_forms_build_form';
    }

    return $forms;
}

/**
 * Checks if current user is granted to perform given operation on the form matching given sfid
 *
 * @param string $sfid
 * @param string $op : 'configure' or 'display'
 */
function so_forms_check_perms($sfid, $op) {
    global $user;
    if($user->uid == 1) {return true;}

    $form_params = so_forms_load_form_params($sfid);

    return empty($form_params->configuration['perms'][$op]) ? false : user_access($form_params->configuration['perms'][$op]);
}

/**
 * Checks if current user is granted to perform given operation on the field matching given secured id
 *
 * @param string $secured_id
 * @param string $op : 'configure' or 'display'
 */
function so_forms_check_secured_field_perms($secured_id, $op) {
    global $user;
    if($user->uid == 1) {return true;}

    $field_infos = so_forms_get_stored_field($secured_id);
    $form_params = so_forms_load_form_params($field_infos->sfid);

    return empty($form_params->configuration['perms'][$op]) ? false : user_access($form_params->configuration['perms'][$op]);
}

/**
 * Return database stored params of the form
 *
 * @param string $id
 *
 * return stdClass
 */
function so_forms_load_form_params($sfid) {
    // pas de mise en cache static : on se sert de cette fonction pour tester l'existence du form, avant d'éventuellement le créer (compat. mode)

    $form_params = new stdClass();

    $result = db_query("SELECT name, params, secured_sfid FROM {so_forms} WHERE sfid='" . $sfid . "' OR secured_sfid='" . $sfid . "'");
    $row = db_fetch_array($result);

    if(empty($row)) {return;}

    $params = unserialize($row['params']);

    $form_params->secured_sfid = $row['secured_sfid'];
    $form_params->name = $row['name'];
    $form_params->configuration = $params['configuration'];
    $form_params->definitions = $params['definitions_cache'];

    return $form_params;
}

/**
 * Retrieves sfid from database
 *
 * @param string $module (or null)
 * @param string $id
 *
 * @return string
 */
function so_forms_get_sfid($module, $id) {
    if($module == null) {
        return db_result(db_query("SELECT sfid FROM {so_forms} WHERE secured_sfid='" . $id . "'"));
    } else {
        return $module . ':' . $id;
    }
}

/**
 * Gathers all form fields enabled by modules
 *
 * @param string $sfid
 * @param boolean $from_cache if set to 'true', modules won't be called. Instead, the light database cache is loaded.
 *
 * @return array of :
 *  [module name]:[field name]:[field context] => array :
 *      - label : (string) human readable name
 *      - type :  (string array/string) one or more types
 *      - values_callback : (string) optional function name which returns a non-indexed array of values
 */
function so_forms_load_fields_pool($sfid, $from_db_cache = false) {
    static $pool = array();

    if(empty($pool)) {

        if($from_db_cache == false) {
            $field_infos = explode(':', $sfid);

            // On récupère les champs des modules implémentant le hook_so_forms()
            $modules = module_implements('so_forms');

            foreach($modules as $module) {
                $definitions = module_invoke($module, 'so_forms', $field_infos[0], $field_infos[1]);

                foreach((array)$definitions['fields_definitions'] as $field_name => $field) {
                    $field_context = !empty($field['context']) ? $field['context'] : $field_infos[1];

                    $pool[$module . ':' . $field_name . ':' . $field_context] = $field;
                }

                if(!empty($definitions['types_definitions'])) {
                    so_forms_register_fields_types($definitions['types_definitions']);
                }

                if(!empty($definitions['widgets_definitions'])) {
                    so_forms_register_widgets($definitions['widgets_definitions']);
                }
            }
        } else {
            $form_params = so_forms_load_form_params($sfid);

            so_forms_register_fields_types($form_params->definitions['registered_fields_types']);
            so_forms_register_widgets($form_params->definitions['registered_widgets']);
        }
    }

    spl_autoload_register(function($classname){
        $registered_class_paths = so_forms_register_class_paths();

        // certains modules (ie:Devel) utilisent class_exists() avec autoload à TRUE
        if(!isset($registered_class_paths[$classname])) {return;}

        require $registered_class_paths[$classname] . '/' . $classname . '.class.php';
    });

    return $pool;
}

/**
 * Store and return classes' paths
 * Without parameter, returns whole classes' paths
 *
 * @param array $class : class_name => class_path
 * @return array of class_name => class_path
 */
function so_forms_register_class_paths($class = null) {
    static $classes = array();

    if($class != null) {
        $classes = array_merge($classes, $class);
    }

    return $classes;
}

/**
 * Stores fields types implemented by modules
 * Without parameter, returns all registered types
 *
 * @param array $types_definitions
 * @return array
 */
function so_forms_register_fields_types($types_definitions = null) {
    static $types = array();

    if(!empty($types_definitions)) {
        $types = array_merge($types, $types_definitions);

        foreach($types_definitions as $type_definition) {
            so_forms_register_class_paths(array($type_definition['class'] => $type_definition['path']));
        }
    }

    return $types;
}

/**
 * Helper : provides all registered form fields types list.
 *
 * @return array of :
 *      field_type => array :
 *          - label : human readable name
 *          - class : class name
 *          - path : path to php class file (without trailing slash)
 */
function so_forms_registered_fields_types() {
    return so_forms_register_fields_types();
}

/**
 * Stores widgets implemented by modules
 * Without parameter, returns all registered types
 *
 * @param array $widgets_definitions
 * @return array
 */
function so_forms_register_widgets($widgets_definitions = null) {
    static $widgets = array();

    if(!empty($widgets_definitions)) {
        $widgets = array_merge($widgets, $widgets_definitions);

        foreach($widgets_definitions as $widget_definition) {
            so_forms_register_class_paths(array($widget_definition['class'] => $widget_definition['path']));
        }
    }

    return $widgets;
}

/**
 * Helper : provides all registered widgets list.
 *
 * @return array of :
 *      field type => array :
 *          - label : human readable name
 *          - class : class name
 *          - path : path to php class file (without trailing slash)
 */
function so_forms_registered_widgets() {
    return so_forms_register_widgets();
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the module
*/
function so_forms_perm() {
  return array('administer so forms');
}

/**
 * Implementation of hook_init()
 */
function so_forms_init() {

    $local_path = drupal_get_path('module', 'so_forms');

    so_forms_register_class_paths(array(
        'FormFieldAbstract' => $local_path . '/plugins/fields',
        'FormWidgetAbstract' => $local_path . '/plugins/widgets',
    ));
}

/**
 * Implementation of hook_so_forms()
 * Define base types and widgets
 */
function so_forms_so_forms($module, $id) {
    $local_path = drupal_get_path('module', 'so_forms') . '/plugins';

    return array(
        'types_definitions' => array(
            'text' => array(
                'label' => 'Text',
                'class' => 'FormFieldText',
                'path' => $local_path . '/fields',
            ),
            'dates' => array(
                'label' => 'Dates',
                'class' => 'FormFieldDates',
                'path' => $local_path . '/fields',
            ),
            'numerical' => array(
                'label' => 'Numerical',
                'class' => 'FormFieldNumerical',
                'path' => $local_path . '/fields',
            ),
        ),
        'widgets_definitions' => array(
            'textfield' => array(
                'label' => 'Text field',
                'class' => 'FormWidgetTextfield',
                'path' => $local_path . '/widgets',
            ),
            'checkboxes' => array(
                'label' => 'Check boxes',
                'class' => 'FormWidgetCheckboxes',
                'path' => $local_path . '/widgets',
            ),
            'select' => array(
                'label' => 'Select box',
                'class' => 'FormWidgetSelect',
                'path' => $local_path . '/widgets',
            ),
            'radios' => array(
                'label' => 'Radios buttons',
                'class' => 'FormWidgetRadios',
                'path' => $local_path . '/widgets',
            ),
            'onoff' => array(
                'label' => 'Check box (yes/no)',
                'class' => 'FormWidgetOnOff',
                'path' => $local_path . '/widgets',
            ),
            'datefields' => array(
                'label' => 'Date fields',
                'class' => 'FormWidgetDatefields',
                'path' => $local_path . '/widgets',
            ),
        ),
    );
}

/**
 * Implementation of hook_theme().
 */
function so_forms_theme() {

	return array(
		'so_forms_fields_overview' => array(
			'arguments' => array(),
		),
		'so_forms_edit_field' => array(
			'arguments' => array(),
		),
        'so_form' => array(
            'pattern' => 'so_form__',
            'arguments' => array('form' => array()),
            'template' => 'so-form',
            'path' => drupal_get_path('module', 'so_forms') . '/theme',
            'file' => 'theme.inc',
        )
	);
}

/**
 * Implementation of hook_menu()
 */
function so_forms_menu() {
    $items = array();

    $items['admin/so_forms/edit_field/%/%'] = array( // sfid, database id  /lang (optionel)
        'page callback' => 'drupal_get_form',
        'page arguments' => array('so_forms_edit_field', 4), // database id  /lang (optionel)
        'access callback' => 'so_forms_check_perms',
        'access arguments' => array(3, 'configure'), // sfid
        'type' => MENU_CALLBACK,
        'file' => 'so_forms.admin.inc'
    );
    $items['admin/so_forms/delete_field/%/%'] = array( // sfid, database id
        'page callback' => 'so_forms_delete_field',
        'page arguments' => array(4), // database id
        'access callback' => 'so_forms_check_perms',
        'access arguments' => array(3, 'configure'), // sfid
        'type' => MENU_CALLBACK,
        'file' => 'so_forms.admin.inc'
    );
    $items['admin/so_forms/delete_group/%/%'] = array( // sfid, database id
        'page callback' => 'so_forms_delete_group',
        'page arguments' => array(4), // database id
        'access callback' => 'so_forms_check_perms',
        'access arguments' => array(3, 'configure'), // sfid
        'type' => MENU_CALLBACK,
        'file' => 'so_forms.admin.inc'
    );
    $items['admin/so_forms/js/field_type_options/%'] = array( // sfid
        'page callback' => 'so_forms_js_field_type_options',
        'page arguments' => array(4), // sfid
        'access callback' => 'so_forms_check_perms',
        'access arguments' => array(4, 'configure'), // sfid
        'type' => MENU_CALLBACK,
        'file' => 'so_forms.admin.inc'
    );
    $items['so_forms/js/%/%'] = array(
        'page callback' => 'so_forms_js_callback',
        'page arguments' => array(2, 3), // secured_id, op /additional arguments
        'access callback' => 'so_forms_check_secured_field_perms',
        'access arguments' => array(2, 'display'), // secured_id
        'type' => MENU_CALLBACK,
        'file' => 'so_forms.admin.inc'
    );

    return $items;
}

/**
 * Returns form fields without groups for a given form
 * Fields are ordered by weight ascendant
 *
 * @param string $sfid
 * @return array of objects
 */
function so_forms_get_stored_fields($sfid) {

    $db_result = db_query("SELECT * FROM {so_forms_fields} WHERE sfid='%s' AND field_type!='group' ORDER BY weight ASC", $sfid);

    $result = array();

    while ($field = db_fetch_object($db_result)) {
            $result[$field->id] = $field;
            $result[$field->id]->params = (array)unserialize($result[$field->id]->params);
            $result[$field->id]->field_values = (array)unserialize($result[$field->id]->field_values);
    }

    return $result;
}

/**
 * Returns one db stored field
 *
 * @param int/string $id database id or secured id
 * @return stdClass object matching db record
 */
function so_forms_get_stored_field($id) {

    if(strlen($id) == 32) { // secured id
        $result = db_query("SELECT * FROM {so_forms_fields} WHERE secured_id='%s'", $id);
    } else {
        $result = db_query("SELECT * FROM {so_forms_fields} WHERE id=%d", $id);
    }

    $field = db_fetch_object($result);

    $field->params = (array)unserialize($field->params);
    $field->field_values = (array)unserialize($field->field_values);

    return $field;
}

/**
 * Returns only the form fields matching type 'group' for a given form
 *
 * @param string $sfid
 * @return array of objects
 */
function so_forms_get_stored_groups($sfid) {
    $db_result = db_query("SELECT * FROM {so_forms_fields} WHERE sfid='%s' AND field_type='group' ORDER BY weight ASC", $sfid);

    $result = array();

    while ($field = db_fetch_object($db_result)) {
            $result[$field->id] = $field;
            $result[$field->id]->params = (array)unserialize($result[$field->id]->params);
    }

    return $result;
}

/**
 * Save a form field
 *
 * @param array &$field
 *
 * @return stdClass : the database stored field object
 */
function so_forms_store_field(&$field) {

    $field['params'] = serialize((array)$field['params']);
    $field['field_values'] = serialize((array)$field['field_values']);

    if (!empty($field['id'])) {
        drupal_write_record('so_forms_fields', $field, 'id');
    } else {
        $field['secured_id'] = md5(uniqid($form->sfid) . 'fdàdgg@8-(55ag%%g)'); // id public (AHAH, etc.)
        drupal_write_record('so_forms_fields', $field);
    }

    return so_forms_get_stored_field(db_last_insert_id('so_forms_fields', 'id'));
}

/**
 * Returns a field fully loaded object
 *
 * @param int $id database id
 * @param string $lang lang code
 * @param boolean $light if set to 'true', fields pool is not loaded. Instead, the database pool cache is loaded.
 * @param boolean $cached : if true, function returns a cached instance
 *
 * @return object
 */
function so_forms_get_field_instance($id, $lang = null, $light = false, $cached = true) {

    static $field_instances = array();

    if($cached == true && !empty($field_instances[$id])) {return $field_instances[$id];}

    $form_field = so_forms_get_stored_field($id);

    so_forms_load_fields_pool($form_field->sfid, $light);

    $field_types = so_forms_registered_fields_types();
    $widgets = so_forms_registered_widgets();

    $widget = new $widgets[$form_field->widget]['class']();

    $field_instance = new $field_types[$form_field->field_type]['class']($form_field, $widget, $lang);

    $field_instances[$id] = $field_instance;

    return $field_instance;
}

/**
 * The Form builder
 *
 * @param array $form_state
 * @param string $module
 * @param string/int $id
 * @param string $lang : lang code
 */
function so_forms_build_form(&$form_state, $module, $id, $lang) {

    $sfid = so_forms_get_sfid($module, $id);

    $form_params = so_forms_load_form_params($sfid);
    if(empty($form_params->secured_sfid)) {return false;}

    if(so_forms_check_perms($sfid, 'display') == false) {
        return;
    }

    $form = array(
        'normal' => array(),
        'advanced' => array(),
    );

    $form['#tree'] = false;
    $form['#theme'] = array('so_form__' . $form_params->secured_sfid, 'so_form__' . $module . '_' . $id, 'so_form__' . $module, 'so_form');
    $form['#submit'] = array('so_forms_build_form_submit');

    $form['#id'] = $module . '_' . strtolower(preg_replace('#[^a-z0-9_]#', '_', $id));
    $form['#attributes'] = array('class' => 'so_forms_form');

    $groups = so_forms_get_stored_groups($sfid);

    $groups_pointers = array();

    foreach($groups as $id => $group) {

        if($group->params['enabled'] != true) {
            continue;
            unset($groups[$id]);
        }

        $form[$group->params['form_region']]['group_' . $group->id] = array(
            '#type' => 'fieldset',
            '#title' => $group->label,
            '#weight' => $group->weight,
        );

        $groups_pointers[] = &$form[$group->params['form_region']]['group_' . $group->id];
    }

    if($form_params->configuration['memorize'] == true) {
        $default_value = $_SESSION['so_forms'][$sfid]['user_raw_inputs'];
    } elseif(!empty($form_params->configuration['callbacks']['populate'])) {
        $default_value = call_user_func($form_params->configuration['callbacks']['populate'], $module, $id);
    }

    if(!empty($default_value)) {
        $form['#form_is_populated'] = true;
    }

    $fields = so_forms_get_stored_fields($sfid);

    foreach($fields as $id => $field) {

        if($field->params['enabled'] != true) {continue;}

        if($field->params['form_region'] == 'advanced' && !empty($default_value[$field->id])) {
            $form['#advanced_form_is_populated'] = true;
        }

        if(!empty($field->gid)) {
            if(!isset($groups[$field->gid])) {continue;}
            $target = &$form[$field->params['form_region']]['group_' . $field->gid];
        } else {
            $target = &$form[$field->params['form_region']];
        }

        $field_instance = so_forms_get_field_instance($id, $lang, true);

        $field_rendered = $field_instance->render((array)$default_value[$field->id]);

        if(empty($field_rendered['#type'])) {continue;}

        foreach(element_children($field_rendered) as $element) {
            if(empty($field_rendered[$element]['#type'])) {continue;}

            $field_rendered['field_' . $field->id . '_' . $element] = $field_rendered[$element];
            unset($field_rendered[$element]);
        }

        $target['field_' . $field->id] = $field_rendered;
    }

    foreach($groups_pointers as &$group_pointer) {
        if(count(element_children($group_pointer)) == 0) {
            $group_pointer = null;
        }
    }

    $form['sfid'] = array(
        '#type' => 'value',
        '#value' => $sfid,
    );

    $form['#public_infos'] = so_forms_infos($module, $id);

    if($lang == null) {
        $lang = language_default('language');
    }

    $form['sf_language'] = array(
        '#type' => 'value',
        '#value' => $lang,
    );

    if(!empty($form_params->configuration['buttons']['submit'])) {
        $form['submit'] = array(
            '#type' => 'submit',
            '#value' => t($form_params->configuration['buttons']['submit']),
            '#weight' => 100,
            '#op' => 'execute',
            '#attributes' => array('class' => 'submit'),
        );
    }

    if(!empty($form_params->configuration['buttons']['reset'])) {
        $form['reset'] = array(
            '#type' => 'submit',
            '#value' => t($form_params->configuration['buttons']['reset']),
            '#weight' => 100,
            '#op' => 'reset',
            '#disabled' => count($_SESSION['so_forms'][$sfid]) < 2, // null ou param 'updated' existant
            '#attributes' => array('class' => 'reset'),
        );
    }

    return $form;
}

/**
 * The Form submission
 *
 * @param array $form
 * @param array $form_state
 */
function so_forms_build_form_submit($form, &$form_state) {

    $sfid = $form_state['values']['sfid'];
    $lang = $form_state['values']['sf_language'];

    $field_infos = explode(':', $sfid);

    if($form_state['clicked_button']['#op'] == 'reset') {
        if(!empty($_SESSION['so_forms'][$sfid])) {
            so_forms_get_user_inputs($field_infos[0], $field_infos[1], true);
        }

        so_forms_process_user_inputs($sfid, null, null);

        return;
    }

    $user_inputs = array();
    $user_raw_inputs = array();

    // on fait un premier passage pour récupérer les valeurs, et grouper celles qui vont de pair (ex: les champs datefields)
    foreach(element_children($form_state['values']) as $value_id) {

        $field_infos = array();
        $field_value = $form_state['values'][$value_id];

        if(empty($field_value) || !preg_match('#^field_([0-9]+)(?:_(.*))?$#', $value_id, $field_infos)) {continue;}

        $field_id = $field_infos[1];
        $field_sub_id = $field_infos[2];

        if(!empty($field_sub_id)) {
            $user_inputs[$field_id][$field_sub_id] = $field_value;
        } else {
            $user_inputs[$field_id] = $field_value;
        }
    }

    // second passage : on compile et on traite les valeurs
    foreach($user_inputs as $field_id => $input) {
        $field_instance = so_forms_get_field_instance($field_id, $lang, true);

        $compiled_input = $field_instance->compileUserInputs((array)$input);

        // si ce champ n'a pas été renseigné, est-il utile d'en informer le propriétaire ? Que ferait-il de cette information ?
        // cette info sera davantage utile à la future hypothétique mécanique de validation des champs
        if(!empty($compiled_input['values'])) {
            $compiled_user_inputs[$field_instance->getFieldIdentifier()] = $compiled_input;
            $compiled_user_inputs[$field_instance->getFieldIdentifier()]['user_raw_inputs'][$field_id] = $input;
            $user_raw_inputs[$field_id] = $input;
        }
    }

    so_forms_process_user_inputs($sfid, $user_raw_inputs, $compiled_user_inputs);

    $form_params = so_forms_load_form_params($sfid);

    if(!empty($form_params->configuration['callbacks']['redirect'])) {
        $path = call_user_func($form_params->configuration['callbacks']['redirect'], $field_infos[0], $field_infos[1], $compiled_user_inputs); // module, id, user inputs
        if(!empty($path)) {
            drupal_goto($path);
        }
    }
}

/**
 * Process user inputs
 *
 * @param string $sfid
 * @param array $user_raw_inputs
 * @param array $user_inputs
 */
function so_forms_process_user_inputs($sfid, $user_raw_inputs, $user_inputs) {
    $form_params = so_forms_load_form_params($sfid);

    if(!empty($form_params->configuration['callbacks']['process'])) {
        $field_infos = explode(':', $sfid);
        $form_params->configuration['callbacks']['process']($field_infos[0], $field_infos[1], $user_inputs, $user_raw_inputs, (array)$_SESSION['so_forms'][$sfid]['user_inputs']);
    }

    if(!empty($user_raw_inputs) && $form_params->configuration['memorize'] == true) {
        $_SESSION['so_forms'][$sfid] = array(
            'updated' => true,
            'user_raw_inputs' => $user_raw_inputs,
            'user_inputs' => $user_inputs,
        );
    } else {
        unset($_SESSION['so_forms'][$sfid]); // dans le doute, on supprime
    }
}
